buildscript {
    ext {
        karateVersion = '0.9.4'
    }
}

plugins {
    id 'scala'
    id 'java'
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    implementation 'org.scala-lang:scala-library:2.12.8'

    compile "com.intuit.karate:karate-apache:${karateVersion}"
    compile 'io.gatling.highcharts:gatling-charts-highcharts:3.0.2'

    compile("com.intuit.karate:karate-gatling:${karateVersion}")
    compile 'net.masterthought:cucumber-reporting:3.8.0'
    compile group: 'com.intuit.karate', name: 'karate-junit4', version: '0.9.1'
    compile "io.gatling:gatling-app:3.0.2"
}

test {
    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")

    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")

    // ensure tests are always run
    outputs.upToDateWhen { false }
}

sourceSets {
    test {
        resources {
            // "*.feature" files in "src/test/scala" should be treated as resource files
            srcDirs = ['src/test/resources', 'src/test/scala']
        }
    }
    integration {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

task gatlingRun(type: JavaExec) {
    group = 'Performance Tests'
    description = 'Run Gatling Tests'

    new File("${buildDir}/reports/gatling").mkdirs()

    classpath = sourceSets.test.runtimeClasspath

    main = "io.gatling.app.Gatling"
    args = [
            '-s', 'test.LoadSimulation',
            '-rf', "${buildDir}/reports/gatling"
    ]
    systemProperties System.properties
}

task apiTest(type: Test, description: 'Runs the functional tests.') {

    // pull cucumber options into the cucumber jvm
    systemProperty "cucumber.options", System.properties.getProperty("cucumber.options")
    // pull karate options into the jvm
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // Send dynamic enviroment and url
    systemProperty "base.URL", System.properties.getProperty("base.URL")
    systemProperties project.properties.subMap(["karate.ENV"])

    outputs.upToDateWhen { false }
}